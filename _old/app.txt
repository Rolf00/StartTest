          
{/* main button dialog */}     
import InselDialog_MainData from './InselDialog_MainData';

const avaiableDialogs = {
  dialog_MainData: InselDialog_MainData,
  //dialog1: ComponentB,
};

const EditDialog = avaiableDialogs[this.props.dialogName];

      {/* main button dialog */}     
      {this.props.dialogName.length > 0 &&
        <EditDialog
          headers = {this.props.headers}
          row = {this.state.data[rowIndex]}
          setDataFromDialog = {this.props.setDataFromDialog(row)}
        >
        </EditDialog>
      }

      setDataFromDialog(rowid, row)      
      {
        const index = this.getRowIndex(rowid);
        const newlist = this.state.data;
        newlist[index] = row;
        this.setState({data, newlist});
        // TODO can we update only one row like: setState({row[index]: row});
      }




///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////
// Button dialog

  return (
    <Grid container direction="row" spacing={2}>
      <Grid
        item
        style={{
          display: "flex",
          alignItems: "center",
        }}
      >
        Items image
      </Grid>
      <Grid item>
        <Grid container direction="column">
          <Grid item>
            <TextField
              value={value}
              placeholder="0.000"
              onFocus={handleFocus}
              onBlur={handleBlur}
              onChange={(e) => handleChangeValue(e)}
            ></TextField>
          </Grid>
          <Grid item>
            <TextField value={"Text"}></TextField>
          </Grid>
          <Grid item>Items 2</Grid>
          <Grid item>Items 2</Grid>
        </Grid>
      </Grid>
    </Grid>
  );



///////////////////////////////////////////////////////////


//// TODO for 10.12.2024
//// TODO : integer anf float fields: make float not accept letters
// <TextField inputProps={{ type: 'number'}} />

import * as React from "react";
import { TextField } from "@mui/material";

export default function App() {
  const [phone, setPhone] = React.useState("123");
  const [info, setinfo] = React.useState();

  let focusedName = "";

  const handleEnter = (e) => {
    //focusedName = e.target.name;
    //setinfo(e.target.name);
  };

  const handleLeave = (e) => {
    //focusedName = "";
    //setinfo(" no fcusedName2");

    const val = e.target.value;
    const haspos = val.includes(".");
    if (haspos) {
      const form = (Math.round(val * 100) / 100).toFixed(2);
      setinfo(form);
    }

  };

  const handleChange = (event) => {
    //if (val.match(/[^0-9]./)) {
    //  return event.preventDefault();
    //}

    /*-
    if (info === event.target.id) {
    } else {
      const haspos = val.contains(".");
      if (haspos) {
        const pos = val.IndexOf(".");
        const p1 = val.substring(0, pos);
        const p2 = val.substring(pos + 1, val.length - pos);
      }
      // val.toFixed(3);
    }
    */
    const val = event.target.value;
    /*
    const haspos = val.includes(".");
    if (haspos) {
      const pos = val.indexOf(".");
      const p1 = val.substring(0, pos);
      const p2 = val.substring(pos + 1);
      //const p3 = p2.substring(0, 2);
      const p3 = Math.round(val * 20) / 20;
      //setinfo(p3);
      //const newval = p1 + "." + p2;
      //setPhone(newval);
      //return;
    }
    */

    setPhone(val);
  };

  return (
    <div>
      <TextField
        id="phone_number"
        name="name1"
        label="Phone Number"
        variant="outlined"
        type="number"
        inputProps={{ inputMode: "numeric" }}
        value={phone}
        onChange={(e) => handleChange(e)}
        onEnter={(e) => handleEnter(e)}
        onBlur={(e) => handleLeave(e)}
      />
      <TextField
        id="phone_number2"
        name="name2"
        label="Phone Number"
        variant="outlined"
        type="number"
        inputProps={{ inputMode: "numeric" }}
        //value={phone}
        //onChange={(e) => handleChange(e)}
        onEnter={(e) => handleEnter(e)}
        onBlur={(e) => handleLeave(e)}
      />
      <TextField value={info}></TextField>
    </div>
  );
}


/////////////////////////////////////////////////////////////////////////////
// buttons : add position
static defaultButtonsYesNoCancel = [
  { caption: "Yes", icon: imgIconYes, horizontalAlign: 'left', X: 1, Y: 1, },
  { caption: "No", icon: imgIconNo, horizontalAlign: 'left', X: 2, Y: 1, },
  { caption: "Cancel", icon: imgIconCancel, horizontalAlign: 'left', X: 3, Y: 1, }
];

const colCount = Math.max(...buttons.map(item => item.X));
const rowCount = Math.max(...buttons.map(item => item.Y));


render()  
{

  for (let r = 0; r < rowCount; r++)
  {
    return (
      <TableRow>
    );
    for (let c = 0; c < colCount; c++)
    {

      const index = buttons.findIndex(b => (b.X === c && b.Y === r));
      const caption = buttons[index].caption;
      const icon = buttons[index].icon;
      if (index > -1)
      {
        return(
          <TableCell>
            <IconButton
              value={caption}
              style={{
                width: buttonWidth,
                height: height,
              }}>
              <img src={icon} style={{ width: width, height: width, }}/>
            </IconButton>
          </TableCell> 
        );
      }
      else
      {
        return(
          <TableCell></TableCell>
        );
      }
    }
    return (
      </TableRow>
    );
  }
}

////////////////////////////////////////////////////////////////////////


import React from "react";
import Table from "@mui/material/Table";
import TableRow from "@mui/material/TableRow";
import TableCell from "@mui/material/TableCell";

const ItemList = () => {
  const buttons = [
    { caption: "Yes", horizontalAlign: "left", X: 1, Y: 1 },
    { caption: "No", horizontalAlign: "left", X: 2, Y: 1 },
    {
      caption: "Cancel",
      horizontalAlign: "left",
      X: 3,
      Y: 1,
    },
  ];

  //const colCount = Math.max(...buttons.map(item => item.X));
  //const rowCount = Math.max(...buttons.map(item => item.Y));

  const colCount = 3;
  const rowCount = 4;

  const btnList = [];

  const text = "<div>kasdöl kaökd löa aköls</div>";
  btnList.push({ text });

  /*

  for (let c = 0; c < colCount; c++) {
    btnList.push(`<TableRow>`);

    for (let r = 0; r < rowCount; r++) {
      const index = buttons.findIndex((b) => b.X === c && b.Y === r);
      const caption = buttons[index].caption;
      const icon = buttons[index].icon;
      if (index > -1) {
        btnList.push(`<TableCell>ttttt</TableCell>`);
       else {
        btnList.push(`<TableCell></TableCell>`);
      
    }
    btnList.push(`</TableRow>`);
  }
  btnList.push(`</Table>`);
  */

  return <div>{btnList}</div>;
};



//////////////////////////////////////////////////
// 13.12.2024
// TODO: export excel with line break inside the cell?
         // now I replace "\n" => " | "
         // put the text in parentesis
         // problem with export to excel for multilines
// TODO: fill headers with default values: also in DOC: checkHeaders
// TODO: header menu: https://mui.com/x/react-data-grid/
// TODO: Datepicker
// TODO DOC : textWrap
// TODO : test numbers and decimal
// TODO : npm install react-beautiful-dnd
// TODO : best way to partioning Grid? Stack? div? Table?


////////////////////////////////////////////////////////////////////////////
// TODO : IFieldDate

const [datePicker, setDatePickerValueFromJS] = useState(dayjs(props.value));

const handleChange = (e) =>
  {
    const year = parseInt(e.$y);
    const month = parseInt(e.$M) + 1;
    const day = parseInt(e.$D);
    const datePicker = dayjs(year + "-" + month + "-" + day);

    // change the date in the DatePicker
    setDatePickerValueFromJS(datePicker);

    // change the date in data as JS-date
    const newValue = new Date(year, month - 1, day);
    // TODO ?
    props.value = newValue;
    //props.handleDataChange(newValue, fieldname);
  }

  <LocalizationProvider dateAdapter={AdapterDayjs}>
  <DatePicker 
    disabled={disabled}
    selected={value}
    dateFormat="dd.MM.yyyy"
    style={{ 
      width: width, 
    }}
    //renderInput={(params) => <TextField {...params} />}
    onChange={(e) => handleChange(e)}
  />
  </LocalizationProvider>     


/////////////////////////////////////////////////////////////////////
/// handleCopyForExcel(all) => replace
value = value.replace("\n", " | ");


/////////////////////////////////////////////////////////////////////
// ButtonDialog
// new options color, colorhover, button size, button height


//////////////////////////////////////////////////////////
// TODO settings : edit height of fields


//////////////////////////////////////////////////////////
// IConst : 

static hasError(value, header)
{
  let hasError = false;
  if (header.editType === this.eidtType_Text ||
      header.editType === this.eidtType_TextMultiline)
  {
    hasError = 
      value.length > header.textMaxLength ||
      (value === null && header.required) ||
      (value === undefined && header.required) ||
      (value === '' && header.required);
  }

  if (header.editType === this.eidtType_Text ||
    header.editType === this.eidtType_TextMultiline)
  {
    hasError = 
      value > header.numberMaxValue ||
      value < header.numberMinValue
      (value === null && header.required) ||
      (value === undefined && header.required) ||
      (value === '' && header.required);
  }
  return hasError;
}



