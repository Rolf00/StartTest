{/* main button dialog */}     
import InselDialog_MainData from './InselDialog_MainData';

const avaiableDialogs = {
  dialog_MainData: InselDialog_MainData,
  //dialog1: ComponentB,
};

const EditDialog = avaiableDialogs[this.props.dialogName];

      {/* main button dialog */}     
      {this.props.dialogName.length > 0 &&
        <EditDialog
          headers = {this.props.headers}
          row = {this.state.data[rowIndex]}
          setDataFromDialog = {this.props.setDataFromDialog(row)}
        >
        </EditDialog>
      }

      setDataFromDialog(rowid, row)      
      {
        const index = this.getRowIndex(rowid);
        const newlist = [...this.state.data];
        newlist[index] = row;
        this.setState({data, newlist});
        // TODO can we update only one row like: setState({row[index]: row});
      }


{/* 03.12.2024 */}   
{/*
import React, { useState } from "react";

// Modal component
const Modal = ({ onClose, onConfirm }) => {
  return (
    <div style={styles.modalOverlay}>
      <div style={styles.modal}>
        <h2>Are you sure?</h2>
        <div>
          <button onClick={onConfirm} style={styles.button}>YES</button>
          <button onClick={onClose} style={styles.button}>NO</button>
        </div>
      </div>
    </div>
  );
};

const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Handle open modal
  const openModal = () => {
    setIsModalOpen(true);
  };

  // Handle close modal
  const closeModal = () => {
    setIsModalOpen(false);
  };

  // Handle confirm action
  const handleConfirm = () => {
    console.log("User confirmed");
    closeModal();
  };

  return (
    <div>
      <button onClick={openModal} style={styles.openButton}>Open Modal</button>

      {isModalOpen && (
        <Modal onClose={closeModal} onConfirm={handleConfirm} />
      )}
    </div>
  );
};

const styles = {
  openButton: {
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
  },
  modalOverlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '5px',
    textAlign: 'center',
  },
  button: {
    margin: '10px',
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
  },
};

export default App;
*/} 

// Menu with side sub menu
// https://github.com/mui/material-ui/issues/11723

//import ArrowRight from "@mui/icons-material/ChevronRightRounded";
//import NewIcon 

//https://mui-nested-menu.vercel.app/nested-dropdown

//https://codesandbox.io/p/sandbox/material-ui-nested-menu-item-example-b25j6?file=%2Fsrc%2FApp.tsx%3A34%2C1 

//https://purecode.ai/blogs/mui-menuitem


// TODO
// -------------------------------------------------------------
=> add edittypes to InselConstants
=> add chip icons


///////////////////////////////////////////////////////////
// columns for Waldo

const headers = [
  {
    databaseField: "",
    isResizable: false,
    isEditable: true,
    isRequired: true,
    isVisible: true,
    isSortable: false,
    width: 45,
    minWidth: 45,
    maxWidth: 55,
    editType: 'selectionIcon',
    defaultValue: false,
    dataFieldName: '',
    horizontalAlign: 'center',
    hasHeaderMenu: false,
  },
  {
    databaseField: "primaryKey",
    headerTitle: "ID",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 65,
    minWidth: 65,
    maxWidth: 120,
    editType: 'primaryKey',
    dataFieldName: 'id',
    horizontalAlign: 'center',
    hasHeaderMenu: false,
  },
  {
    databaseField: "firstName",
    headerTitle: "Firstname",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 180,
    minWidth: 140,
    maxWidth: 300,
    editType: 'textfield',
    dataFieldName: 'firstName',
    horizontalAlign: 'left',
    hasHeaderMenu: true,
  },
  {
    databaseField: "lastName",
    headerTitle: "Lastname",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 180,
    minWidth: 140,
    maxWidth: 300,
    editType: 'textfield',
    dataFieldName: 'lastName',
    horizontalAlign: 'left',
    hasHeaderMenu: true,
  },
  {
    databaseField: "age",
    headerTitle: "Age",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 80,
    minWidth: 80,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'age',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "birthday",
    headerTitle: "Birthday",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 120,
    minWidth: 120,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'birthday',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "gender",
    headerTitle: "Gender",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 120,
    minWidth: 120,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'gender',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "diagnosis",
    headerTitle: "Diagnosis",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 120,
    minWidth: 120,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'diagnosis',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "bloodPressure",
    headerTitle: "Blood Pressure",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 120,
    minWidth: 120,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'bloodPressure',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "weight",
    headerTitle: "Weight (kg)",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 120,
    minWidth: 120,
    maxWidth: 120,
    editType: 'textfield',
    dataFieldName: 'weight',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
  {
    databaseField: "address",
    headerTitle: "Adress",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 180,
    minWidth: 180,
    maxWidth: 320,
    editType: 'textfieldmultiline',
    dataFieldName: 'address',
    horizontalAlign: 'left',
    hasHeaderMenu: true,
  },
  {
    databaseField: "nationality",
    headerTitle: "Nationality",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 160,
    minWidth: 160,
    maxWidth: 320,
    editType: 'textfield',
    dataFieldName: 'nationality',
    horizontalAlign: 'left',
    hasHeaderMenu: true,
  },
  {
    databaseField: "survey",
    headerTitle: "Surveys",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 160,
    minWidth: 160,
    maxWidth: 320,
    editType: 'integer',
    dataFieldName: 'survey',
    horizontalAlign: 'right',
    hasHeaderMenu: true,
  },
  {
    databaseField: "lastUpdate",
    headerTitle: "Last update",
    isResizable: true,
    isEditable: false,
    isRequired: true,
    isVisible: true,
    isSortable: true,
    defaultSorting: 'asc',
    width: 190,
    minWidth: 190,
    maxWidth: 320,
    editType: 'textfield',
    dataFieldName: 'lastUpdate',
    horizontalAlign: 'center',
    hasHeaderMenu: true,
  },
];


const patients = [];
const countries = ["USA", "Canada", "Germany", "France", "UK", "India", "Australia", "Brazil", "Japan", "Mexico"];

for (let i = 0; i < 100; i++) {
  const randomAge = Math.floor(Math.random() * 60) + 18;  // Age between 18 and 77
  const randomBirthday = new Date(2000 - randomAge, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1);
  const randomWeight = Math.floor(Math.random() * 80) + 40;  // Weight between 40 and 120 kg
  const randomAddress = `${Math.floor(Math.random() * 9999)} ${["Street", "Avenue", "Lane", "Boulevard"][Math.floor(Math.random() * 4)]} ${["Main", "Oak", "Pine", "Maple", "Elm"][Math.floor(Math.random() * 5)]}`;
  const randomCountry = countries[Math.floor(Math.random() * countries.length)];
  const randomUpdate = new Date(Date.now() - Math.floor(Math.random() * (1000 * 60 * 60 * 24 * 365)));  // Random last update within the past year

  patients.push({
    id: i + 1,
    firstName: `Patient${i + 1}`,
    lastName: `Lastname${i + 1}`,
    age: randomAge,
    birthday: randomBirthday.toISOString().split('T')[0],  // Convert to YYYY-MM-DD format
    gender: Math.random() > 0.5 ? "Male" : "Female",
    diagnosis: Math.random() > 0.5 ? "Hypertension" : "Diabetes",
    bloodPressure: `${Math.floor(Math.random() * 50) + 110}/${Math.floor(Math.random() * 40) + 70}`,
    weight: randomWeight,
    address: randomAddress,
    nationality: randomCountry,
    survey: Math.floor(Math.random() * 100) + 1,  // Random number between 1-100
    lastUpdate: randomUpdate.toISOString(),  // Date format: YYYY-MM-DDTHH:MM:SS.SSSZ
  });
}



