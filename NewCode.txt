{/* main button dialog */}     
import InselDialog_MainData from './InselDialog_MainData';

const avaiableDialogs = {
  dialog_MainData: InselDialog_MainData,
  //dialog1: ComponentB,
};

const EditDialog = avaiableDialogs[this.props.dialogName];

      {/* main button dialog */}     
      {this.props.dialogName.length > 0 &&
        <EditDialog
          headers = {this.props.headers}
          row = {this.state.data[rowIndex]}
          setDataFromDialog = {this.props.setDataFromDialog(row)}
        >
        </EditDialog>
      }

      setDataFromDialog(rowid, row)      
      {
        const index = this.getRowIndex(rowid);
        const newlist = [...this.state.data];
        newlist[index] = row;
        this.setState({data, newlist});
        // TODO can we update only one row like: setState({row[index]: row});
      }


{/* 03.12.2024 */}   
{/*
import React, { useState } from "react";

// Modal component
const Modal = ({ onClose, onConfirm }) => {
  return (
    <div style={styles.modalOverlay}>
      <div style={styles.modal}>
        <h2>Are you sure?</h2>
        <div>
          <button onClick={onConfirm} style={styles.button}>YES</button>
          <button onClick={onClose} style={styles.button}>NO</button>
        </div>
      </div>
    </div>
  );
};

const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Handle open modal
  const openModal = () => {
    setIsModalOpen(true);
  };

  // Handle close modal
  const closeModal = () => {
    setIsModalOpen(false);
  };

  // Handle confirm action
  const handleConfirm = () => {
    console.log("User confirmed");
    closeModal();
  };

  return (
    <div>
      <button onClick={openModal} style={styles.openButton}>Open Modal</button>

      {isModalOpen && (
        <Modal onClose={closeModal} onConfirm={handleConfirm} />
      )}
    </div>
  );
};

const styles = {
  openButton: {
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
  },
  modalOverlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '5px',
    textAlign: 'center',
  },
  button: {
    margin: '10px',
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
  },
};

export default App;
*/} 

// Menu with side sub menu
// https://github.com/mui/material-ui/issues/11723

//import ArrowRight from "@mui/icons-material/ChevronRightRounded";
//import NewIcon 

//https://mui-nested-menu.vercel.app/nested-dropdown

//https://codesandbox.io/p/sandbox/material-ui-nested-menu-item-example-b25j6?file=%2Fsrc%2FApp.tsx%3A34%2C1 

//https://purecode.ai/blogs/mui-menuitem


// TODO
// -------------------------------------------------------------










