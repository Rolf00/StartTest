          
{/* main button dialog */}     
import InselDialog_MainData from './InselDialog_MainData';

const avaiableDialogs = {
  dialog_MainData: InselDialog_MainData,
  //dialog1: ComponentB,
};

const EditDialog = avaiableDialogs[this.props.dialogName];

      {/* main button dialog */}     
      {this.props.dialogName.length > 0 &&
        <EditDialog
          headers = {this.props.headers}
          row = {this.state.data[rowIndex]}
          setDataFromDialog = {this.props.setDataFromDialog(row)}
        >
        </EditDialog>
      }

      setDataFromDialog(rowid, row)      
      {
        const index = this.getRowIndex(rowid);
        const newlist = this.state.data;
        newlist[index] = row;
        this.setState({data, newlist});
        // TODO can we update only one row like: setState({row[index]: row});
      }


{/* 03.12.2024 */}   
{/*
import React, { useState } from "react";

// Modal component
const Modal = ({ onClose, onConfirm }) => {
  return (
    <div style={styles.modalOverlay}>
      <div style={styles.modal}>
        <h2>Are you sure?</h2>
        <div>
          <button onClick={onConfirm} style={styles.button}>YES</button>
          <button onClick={onClose} style={styles.button}>NO</button>
        </div>
      </div>
    </div>
  );
};

const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Handle open modal
  const openModal = () => {
    setIsModalOpen(true);
  };

  // Handle close modal
  const closeModal = () => {
    setIsModalOpen(false);
  };

  // Handle confirm action
  const handleConfirm = () => {
    console.log("User confirmed");
    closeModal();
  };

  return (
    <div>
      <button onClick={openModal} style={styles.openButton}>Open Modal</button>

      {isModalOpen && (
        <Modal onClose={closeModal} onConfirm={handleConfirm} />
      )}
    </div>
  );
};

const styles = {
  openButton: {
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
  },
  modalOverlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '5px',
    textAlign: 'center',
  },
  button: {
    margin: '10px',
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
  },
};

export default App;
*/} 

// Menu with side sub menu
// https://github.com/mui/material-ui/issues/11723

//import ArrowRight from "@mui/icons-material/ChevronRightRounded";
//import NewIcon 

//https://mui-nested-menu.vercel.app/nested-dropdown

//https://codesandbox.io/p/sandbox/material-ui-nested-menu-item-example-b25j6?file=%2Fsrc%2FApp.tsx%3A34%2C1 

//https://purecode.ai/blogs/mui-menuitem

//export default function InselTableMenu(headerIndex) 


///////////////////////////////////////////////////////////////////////////////////////////////////////
// newCode from here
///////////////////////////////////////////////////////////////////////////////////////////////////////

// TODO table menu
// => in IconButton => onClick={(e) => handleClick(e)}
// => in Menu => onClose={() => handleClose()}
    //onmouseenter={(e) => handleOpenCloseManageColumns(e, true)}
    //onmouseleave={(e) => handleOpenCloseManageColumns(e, false)}
// => in SubMenu => 

  const handleSortColumn = (sortAscending) => 
  {
    // hide the menu
    handleClose(); 

    // sort the data for one field
    // TODO
    const newData = this.state.data.sort((a, b) => {
      if (sortAscending)
      {
        return a[fieldname].localeCompare(b[fieldname]);
      }
      else
      {
        return b[fieldname].localeCompare(a[fieldname]);
      }
    });

    console.log("ordered newData", newData);

    // now re-render data
    // TODO how to render?
    //this.setState({data: newData});
  }  

  const handleHideColumn = () =>
  {
    // hide the menu 
    handleClose(); 
    props.headers[props.headerIndex].isVisible = true;
    // TODO hot to render headers?
  }
  
  const handleUnhideColumn = () =>
  {
    // close the sub menu
    setAnchorManageColumns(null);
    props.headers[props.headerIndex].isVisible = true;
    // TODO hot to render headers?
  }

  <div
    id="submenu"
    style={{
      position: 'absolute',
      top: '0px',
      left: '100%',  // This places the submenu to the right 
      display: 'none', 
      minWidth: '150px'
    }}
  >
    <Menu
      open={openManageColumns}
      anchorEl={anchorManageColumns}
    >

{/*
          {invisibleMenus.map((header, index) => {
            const title = header.headerTitle;
            const newIndex = index + 100;
            return (
              <MenuItem 
                key={newIndex}
                onclick={() => handleUnhideColumn()} 
              >
                Show column "{title}"
              </MenuItem>
            );
          })}
*/}

      <MenuItem key={6} onClick={() => handleUnhideColumn()}>Show hided column 1</MenuItem>
      <MenuItem key={7} onClick={() => handleUnhideColumn()}>Show hided column 2</MenuItem>
      <MenuItem key={8} onClick={() => handleUnhideColumn()}>Show hided column 3</MenuItem>
      <MenuItem key={9} onClick={() => handleUnhideColumn()}>Show hided column 4</MenuItem>
    </Menu>
  </div>


// InselButtonDialog






// button dialog

<Table>
<TableRow>
  <TableCell 
    rowSpan={2}
    valign="middle"
    style={{
      padding: '10px',
      textAlign: 'center',
      borderStyle: 'none'
    }}
  >
    <img 
      src={mainIconQuestion}
      style={{ 
        width: '50px', 
        height: '50px',
      }}/>
  </TableCell>

  <TableCell 
    style={{
      padding: '10px',
      fontSize: '24px',
      fontWeight: 'bold',
      textAlign: 'center',
      borderStyle: 'none'
    }}>

    <div
      style={{
        fontSize: 24,
        fontWeight: 'bold', 
        padding: '5px 10px',
        textAlign: 'center',
      }}>{this.props.title}</div>

    <div
      style={{
        fontSize: 24,
        fontWeight: 'bold', 
        padding: '5px 10px',
        textAlign: 'center',
      }}>{this.props.question}</div>

    <div
      style={{
        fontSize: 36,
        fontWeight: 'bold', 
        width: btnWidth, 
        height: '52px',
        borderRadius: '16px',
        padding: '5px 10px',
        textAlign: 'center',
      }}>
      <IconButton
        onClick={() => this.handleOnClick(0)}
        style={{
          fontSize: 16,
          fontWeight: 'bold', 
          width: btnWidth, 
          height: '52px',
          borderRadius: '16px',
          padding: '5px 10px',
        }}>
        <img 
          src={mainIconYes}
          style={{ 
            width: '32px', 
            height: '32px',
          }} 
        />
        Yes
      </IconButton>
      &nbsp;
      &nbsp;
      &nbsp;
      <IconButton
        onClick={() => this.handleOnClick(1)}
        style={{
          fontSize: 16,
          fontWeight: 'bold', 
          width: btnWidth, 
          height: '52px',
          borderRadius: '16px',
          padding: '5px 10px',
        }}>
        <img 
          src={mainIconNo}
          style={{ 
            width: '32px', 
            height: '32px',
            paddingRight: '10px',
          }} 
        />
        No
      </IconButton>

      </div>
    </TableCell>
  </TableRow>
</Table>



///////////////////////////////////////////////////////////


  // InselButtonDialog => delete =>
  handleOnClick(index)
  {
    //console.log("handleOnClick", this.props.handleDialogButtons);
    this.setState({open: false});
    this.props.handleDialogButtons(index, this.state.id);
  }
  





/////////////////////////////////////////////
// new file ITextfield

import * as React from 'react';
import TextField from '@mui/material/TextField';

export default function ITextfield (props) 
{

  const index = this.getRowIndex(props.rowid);
  const newList = [...props.data];
  this.state.data[index][props.fieldName] = e.target.value;
  this.setState({data: newList});

  const hasError = this.getHasError(header, value);
  const helperText = hasError ? header.helperText : "";
  const color = hasError ? 'red' : 'black';
  const background = hasError ? '#FFDDDD' : 'transparent';

  return (
    <TextField
      value={value}
      fullWidth
      helperText={helperText} 
      style={{ 
        textAlign: props.header.horizontalAlign, 
      }}
      // TODO inputProps depreceated
      inputProps={{
        sx: {
          color: {color},
          backgroundColor: {background}
        },
      }}
      onChange={e => props.handleTextfieldChangeHere(e, props.rowid, props.field)}
    ></TextField>
  );
}


///////////////////////////////////////////
// new file integer text field NOT GOOD
export default function ITextFieldInteger(props) {

  const decimal = props.value;

  const handleFocus = () => {
    // Format to 6 decimals when focused
    formatValue(6); 
  };

  const handleBlur = () => {
    // Format to 2 decimals when blurred
    formatValue(2); 
  };

  const formatValue = (decimals) => {
    let newValue = value;
    if (newValue) {
      const regex = new RegExp(`^([0-9]*\\.?[0-9]{0,${decimals}})`);
      changeValue(newValue.match(regex)[0]); // Update state with formatted value
    }
  };

  const handleChangeValue = (e) => {
    //alert(e.target.value);
    changeValue(e.target.value);

    /*   
    const newValue = e.target.value;
    //const dLayout = decimal.toFixed(3);

    const regex = /^(\d*\.?\d{0,2})/;
    if (newValue.match(regex)) {
      //changeValue(decimal);
      changeValue(newValue.match(regex)[0]);
    }
    */
  };

  return (
    <Grid container direction="row" spacing={2}>
      <Grid
        item
        style={{
          display: "flex",
          alignItems: "center",
        }}
      >
        Items image
      </Grid>
      <Grid item>
        <Grid container direction="column">
          <Grid item>
            <TextField
              value={value}
              placeholder="0.000"
              onFocus={handleFocus}
              onBlur={handleBlur}
              onChange={(e) => handleChangeValue(e)}
            ></TextField>
          </Grid>
          <Grid item>
            <TextField value={"Text"}></TextField>
          </Grid>
          <Grid item>Items 2</Grid>
          <Grid item>Items 2</Grid>
        </Grid>
      </Grid>
    </Grid>
  );
}


///////////////////////////////////////////////////////////
// new file for IFieldNumber
<IFieldNumber
  value={value}
  rowid={rowid}
  fieldname={fieldname}
  isInteger={isInteger}
  handleTextfieldNumberChange={(e) => handleTextfieldNumberChange(e, rowid, fieldname)} 
></IFieldNumber>

// TODO => in handleTextfieldNumberChange remove:
// TODO parseInt
const number = parseFloat(e.target.value);

////////////////////////////////////////
// implement IIconBurron

{isIconButton &&
<IFieldIconButton
  rowid={rowid}
  header={header}
  button={button}
  handleRowButtonClick={() => props.handleRowButtonClick(rowid, fieldname)} 
></IFieldIconButton>
}

// TODO implemantation
const isIconButton = header.editType === IConst.editType_IconButton;

// TODO implemantation in ITable.js
getRowErrorList(row);
{
  // check the whole row for errors
  let errorText = "";
  for (let h = 0; h < this.state.header.length; h++)
  {
    const header = this.state.header[h];
    if (header.isEditable)
    {
      const value = row[header.dataFieldName];

      // required?
      if (header.isRequired && (value === null || value === ""))
        errorText = errorText + "ERROR field {header.headerTitle}: a value is required.\n";

      // check numbers
      const isNumber = 
        header.editType === IConst.editType_Integer ||
        header.editType === IConst.editType_Decimal;
      if (isNumber && 
        (value > header.numberMaxValue || value < header.numberMinValue))
        errorText = errorText + "ERROR field {header.headerTitle}: {header.helperText}.\n";

      // check text length
      const isText = 
        header.editType === IConst.editType_Textfield ||
        header.editType === IConst.editType_TextfieldMultiline;

      if (isText && value.length > header.textMaxLength)
        errorText = errorText + "ERROR field {header.headerTitle}: {header.helperText}.\n";

    }
  }
}

handleRowButtonClick(rowid, fieldname)
{
  // first check the selected row
  const rowIndex = this.getRowIndex(rowid);
  const rowState = this.getRowState(rowid);
  if (rowState !== IConst.rowStateUnchanged)
  {
    const errorText = this.getRowErrorText(this.data[rowIndex]);
    if (hasErrors)
    {
      alert("Errors in row (rowid):\n" + errorText);
      return;
    }
  }

  // now also chedk all other edited / deleted / inserted rows
  const rowList = this.state.data.filter(r => r.state !== IConst.rowStateUnchanged);
  for (let r = 0; r < rowList.length; r++) 
  {
    const errorText = this.getRowErrorText(rowList[r]);
    if (hasErrors)
    {
      const rowid = rowList[this.props.primaryKey];
      alert("Errors in row {rowid}:\n" + errorText);
      return;
    }
  }

  if (rowList.length !== 0)
  {
    // TODO
    // not all rows are saved, thus, ask what to do
    alert("Not all rows are saved. \nTODO: Do you want to save => (yes, no, cancel).")
  }

  this.props.handleRowButtonClick(rowid, fieldname);
}


  //// check for all components:
  /*

  class InselTable extends React.Component {
  constructor(props) {
    super(props);

    const {
      settings, 
      headers, 
      primaryKey,
      data,
      dialogName } = this.props;

    const EditDialog = avaiableDialogs[this.props.dialogName];
  
    this.state = {
      headers: headers,
      primaryKey: primaryKey,
      data: this.getDataList(),
      page: 0,
      limit: 10,
  */


//// TODO for 10.12.2024
//// TODO : integer anf float fields: make float not accept letters

