          
{/* main button dialog */}     
import InselDialog_MainData from './InselDialog_MainData';

const avaiableDialogs = {
  dialog_MainData: InselDialog_MainData,
  //dialog1: ComponentB,
};

const EditDialog = avaiableDialogs[this.props.dialogName];

      {/* main button dialog */}     
      {this.props.dialogName.length > 0 &&
        <EditDialog
          headers = {this.props.headers}
          row = {this.state.data[rowIndex]}
          setDataFromDialog = {this.props.setDataFromDialog(row)}
        >
        </EditDialog>
      }

      setDataFromDialog(rowid, row)      
      {
        const index = this.getRowIndex(rowid);
        const newlist = [...this.state.data];
        newlist[index] = row;
        this.setState({data, newlist});
        // TODO can we update only one row like: setState({row[index]: row});
      }


{/* 03.12.2024 */}   
{/*
import React, { useState } from "react";

// Modal component
const Modal = ({ onClose, onConfirm }) => {
  return (
    <div style={styles.modalOverlay}>
      <div style={styles.modal}>
        <h2>Are you sure?</h2>
        <div>
          <button onClick={onConfirm} style={styles.button}>YES</button>
          <button onClick={onClose} style={styles.button}>NO</button>
        </div>
      </div>
    </div>
  );
};

const App = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);

  // Handle open modal
  const openModal = () => {
    setIsModalOpen(true);
  };

  // Handle close modal
  const closeModal = () => {
    setIsModalOpen(false);
  };

  // Handle confirm action
  const handleConfirm = () => {
    console.log("User confirmed");
    closeModal();
  };

  return (
    <div>
      <button onClick={openModal} style={styles.openButton}>Open Modal</button>

      {isModalOpen && (
        <Modal onClose={closeModal} onConfirm={handleConfirm} />
      )}
    </div>
  );
};

const styles = {
  openButton: {
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
  },
  modalOverlay: {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modal: {
    backgroundColor: 'white',
    padding: '20px',
    borderRadius: '5px',
    textAlign: 'center',
  },
  button: {
    margin: '10px',
    padding: '10px 20px',
    fontSize: '16px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
  },
};

export default App;
*/} 

// Menu with side sub menu
// https://github.com/mui/material-ui/issues/11723

//import ArrowRight from "@mui/icons-material/ChevronRightRounded";
//import NewIcon 

//https://mui-nested-menu.vercel.app/nested-dropdown

//https://codesandbox.io/p/sandbox/material-ui-nested-menu-item-example-b25j6?file=%2Fsrc%2FApp.tsx%3A34%2C1 

//https://purecode.ai/blogs/mui-menuitem

//export default function InselTableMenu(headerIndex) 

// TODO table menu
// => in IconButton => onClick={(e) => handleClick(e)}
// => in Menu => onClose={() => handleClose()}
    //onmouseenter={(e) => handleOpenCloseManageColumns(e, true)}
    //onmouseleave={(e) => handleOpenCloseManageColumns(e, false)}
// => in SubMenu => 

  const handleSortColumn = (sortAscending) => 
  {
    // hide the menu
    handleClose(); 

    // sort the data for one field
    // TODO
    const newData = this.state.data.sort((a, b) => {
      if (sortAscending)
      {
        return a[fieldname].localeCompare(b[fieldname]);
      }
      else
      {
        return b[fieldname].localeCompare(a[fieldname]);
      }
    });

    console.log("ordered newData", newData);

    // now re-render data
    // TODO how to render?
    //this.setState({data: newData});
  }  

  const handleHideColumn = () =>
  {
    // hide the menu 
    handleClose(); 
    props.headers[props.headerIndex].isVisible = true;
    // TODO hot to render headers?
  }
  
  const handleUnhideColumn = () =>
  {
    // close the sub menu
    setAnchorManageColumns(null);
    props.headers[props.headerIndex].isVisible = true;
    // TODO hot to render headers?
  }

  <div
    id="submenu"
    style={{
      position: 'absolute',
      top: '0px',
      left: '100%',  // This places the submenu to the right 
      display: 'none', 
      minWidth: '150px'
    }}
  >
    <Menu
      open={openManageColumns}
      anchorEl={anchorManageColumns}
    >

{/*
          {invisibleMenus.map((header, index) => {
            const title = header.headerTitle;
            const newIndex = index + 100;
            return (
              <MenuItem 
                key={newIndex}
                onclick={() => handleUnhideColumn()} 
              >
                Show column "{title}"
              </MenuItem>
            );
          })}
*/}

      <MenuItem key={6} onClick={() => handleUnhideColumn()}>Show hided column 1</MenuItem>
      <MenuItem key={7} onClick={() => handleUnhideColumn()}>Show hided column 2</MenuItem>
      <MenuItem key={8} onClick={() => handleUnhideColumn()}>Show hided column 3</MenuItem>
      <MenuItem key={9} onClick={() => handleUnhideColumn()}>Show hided column 4</MenuItem>
    </Menu>
  </div>


// InselButtonDialog

// TODO => add :
/*
        {this.state.buttonDialogId &&
        <InselButtonDialog
          id={this.state.buttonDialogId}
          open={this.state.openButtonDialog}
          title={this.state.buttonDialogTitle}
          question={this.state.buttonDialogQuestion}
          dialogIconType={this.state.dialogType}
          buttonList={this.state.buttonDialogButtons}
          buttonType={this.state.buttonDialogType}
          handleDialogButtons={(index) => this.handleDialogButtons(index, this.state.buttonDialogId)}
        ></InselButtonDialog>
        }

*/

TODO => dialog

this.state = {
  id: id,
  open: open,
  title: title,
  question: question,
  dialogIconType: dialogIconType,
  buttonList: buttonList,
  buttonType : buttonDialogType,
}

const btnList = 
  buttonDialogTypeOk ?  InselConst.defaultButtonsOk :
  buttonDialogTypeYesNo ?  InselConst.defaultButtonsYesNo :
  buttonDialogTypeYesNoCancel ?  InselConst.defaultButtonsYesNoCancel :
  buttonList;

console.log("Dialog btnList", btnList);


handleOnClick(index)
{
  //console.log("handleOnClick", this.props.handleDialogButtons);
  this.setState({open: false});
  this.props.handleDialogButtons(index, this.state.id);
}

// button dialog

<Table>
<TableRow>
  <TableCell 
    rowSpan={2}
    valign="middle"
    style={{
      padding: '10px',
      textAlign: 'center',
      borderStyle: 'none'
    }}
  >
    <img 
      src={mainIconQuestion}
      style={{ 
        width: '50px', 
        height: '50px',
      }}/>
  </TableCell>

  <TableCell 
    style={{
      padding: '10px',
      fontSize: '24px',
      fontWeight: 'bold',
      textAlign: 'center',
      borderStyle: 'none'
    }}>

    <div
      style={{
        fontSize: 24,
        fontWeight: 'bold', 
        padding: '5px 10px',
        textAlign: 'center',
      }}>{this.props.title}</div>

    <div
      style={{
        fontSize: 24,
        fontWeight: 'bold', 
        padding: '5px 10px',
        textAlign: 'center',
      }}>{this.props.question}</div>

    <div
      style={{
        fontSize: 36,
        fontWeight: 'bold', 
        width: btnWidth, 
        height: '52px',
        borderRadius: '16px',
        padding: '5px 10px',
        textAlign: 'center',
      }}>
      <IconButton
        onClick={() => this.handleOnClick(0)}
        style={{
          fontSize: 16,
          fontWeight: 'bold', 
          width: btnWidth, 
          height: '52px',
          borderRadius: '16px',
          padding: '5px 10px',
        }}>
        <img 
          src={mainIconYes}
          style={{ 
            width: '32px', 
            height: '32px',
          }} 
        />
        Yes
      </IconButton>
      &nbsp;
      &nbsp;
      &nbsp;
      <IconButton
        onClick={() => this.handleOnClick(1)}
        style={{
          fontSize: 16,
          fontWeight: 'bold', 
          width: btnWidth, 
          height: '52px',
          borderRadius: '16px',
          padding: '5px 10px',
        }}>
        <img 
          src={mainIconNo}
          style={{ 
            width: '32px', 
            height: '32px',
            paddingRight: '10px',
          }} 
        />
        No
      </IconButton>

      </div>
    </TableCell>
  </TableRow>
</Table>



///////////////////////////////////////////////////////////
mainButtons => is disabled dont execute ctrl-XXX
